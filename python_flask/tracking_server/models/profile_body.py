# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tracking_server.models.base_model_ import Model
from tracking_server import util


class ProfileBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_id: str=None, attributes: object=None, timestamp_utc: int=None):  # noqa: E501
        """ProfileBody - a model defined in Swagger

        :param user_id: The user_id of this ProfileBody.  # noqa: E501
        :type user_id: str
        :param attributes: The attributes of this ProfileBody.  # noqa: E501
        :type attributes: object
        :param timestamp_utc: The timestamp_utc of this ProfileBody.  # noqa: E501
        :type timestamp_utc: int
        """
        self.swagger_types = {
            'user_id': str,
            'attributes': object,
            'timestamp_utc': int
        }

        self.attribute_map = {
            'user_id': 'userId',
            'attributes': 'attributes',
            'timestamp_utc': 'timestampUTC'
        }
        self._user_id = user_id
        self._attributes = attributes
        self._timestamp_utc = timestamp_utc

    @classmethod
    def from_dict(cls, dikt) -> 'ProfileBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The profileBody of this ProfileBody.  # noqa: E501
        :rtype: ProfileBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """Gets the user_id of this ProfileBody.


        :return: The user_id of this ProfileBody.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this ProfileBody.


        :param user_id: The user_id of this ProfileBody.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def attributes(self) -> object:
        """Gets the attributes of this ProfileBody.


        :return: The attributes of this ProfileBody.
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes: object):
        """Sets the attributes of this ProfileBody.


        :param attributes: The attributes of this ProfileBody.
        :type attributes: object
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501

        self._attributes = attributes

    @property
    def timestamp_utc(self) -> int:
        """Gets the timestamp_utc of this ProfileBody.


        :return: The timestamp_utc of this ProfileBody.
        :rtype: int
        """
        return self._timestamp_utc

    @timestamp_utc.setter
    def timestamp_utc(self, timestamp_utc: int):
        """Sets the timestamp_utc of this ProfileBody.


        :param timestamp_utc: The timestamp_utc of this ProfileBody.
        :type timestamp_utc: int
        """
        if timestamp_utc is None:
            raise ValueError("Invalid value for `timestamp_utc`, must not be `None`")  # noqa: E501

        self._timestamp_utc = timestamp_utc

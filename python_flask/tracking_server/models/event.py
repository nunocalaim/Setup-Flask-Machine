# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tracking_server.models.base_model_ import Model
from tracking_server import util


class Event(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, event_name: str=None, metadata: object=None, timestamp_utc: int=None):  # noqa: E501
        """Event - a model defined in Swagger

        :param event_name: The event_name of this Event.  # noqa: E501
        :type event_name: str
        :param metadata: The metadata of this Event.  # noqa: E501
        :type metadata: object
        :param timestamp_utc: The timestamp_utc of this Event.  # noqa: E501
        :type timestamp_utc: int
        """
        self.swagger_types = {
            'event_name': str,
            'metadata': object,
            'timestamp_utc': int
        }

        self.attribute_map = {
            'event_name': 'eventName',
            'metadata': 'metadata',
            'timestamp_utc': 'timestampUTC'
        }
        self._event_name = event_name
        self._metadata = metadata
        self._timestamp_utc = timestamp_utc

    @classmethod
    def from_dict(cls, dikt) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The event of this Event.  # noqa: E501
        :rtype: Event
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_name(self) -> str:
        """Gets the event_name of this Event.


        :return: The event_name of this Event.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name: str):
        """Sets the event_name of this Event.


        :param event_name: The event_name of this Event.
        :type event_name: str
        """
        if event_name is None:
            raise ValueError("Invalid value for `event_name`, must not be `None`")  # noqa: E501

        self._event_name = event_name

    @property
    def metadata(self) -> object:
        """Gets the metadata of this Event.


        :return: The metadata of this Event.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: object):
        """Sets the metadata of this Event.


        :param metadata: The metadata of this Event.
        :type metadata: object
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def timestamp_utc(self) -> int:
        """Gets the timestamp_utc of this Event.


        :return: The timestamp_utc of this Event.
        :rtype: int
        """
        return self._timestamp_utc

    @timestamp_utc.setter
    def timestamp_utc(self, timestamp_utc: int):
        """Sets the timestamp_utc of this Event.


        :param timestamp_utc: The timestamp_utc of this Event.
        :type timestamp_utc: int
        """
        if timestamp_utc is None:
            raise ValueError("Invalid value for `timestamp_utc`, must not be `None`")  # noqa: E501

        self._timestamp_utc = timestamp_utc
